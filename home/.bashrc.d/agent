[[ $- = *i* ]] || return
${IS_MACOS} || return

# fix ssh directory permissions
find -L ~/.ssh/ -type f -exec chmod -c 600 '{}' \;
find -L ~/.ssh/ -type d -exec chmod -c 700 '{}' \;

# ${IS_MACOS} || return
${HEALTHY_INTERNET} || return

# ssh agent startup (rarely works reliably; but utilizing the native launchd instead works fine)
# TODO: convert to launchctl https://www.packetmischief.ca/2016/09/06/ssh-agent-on-os-x/
if ! [[ -S ${SSH_AUTH_SOCK} ]]; then
  cat << EOF
  echo "Silly ssh-agent ..."
  "declare -F | grep \ ssh_": $(declare -F | grep \ ssh_)
  SSH_AUTH_SOCK=${SSH_AUTH_SOCK}
  SSH_AGENT_PID=${SSH_AGENT_PID}
  "ps -ef | grep ssh-agent": $(ps -ef | grep ssh-agent)
  "ssh-add -l": $(ssh-add -l 2> /dev/null)
EOF
  read -p "Did not find valid socket for SSH_AUTH_SOCK; press any key to clear ssh-agent resources."
  pkill -f "ssh-agent -s"
  unset SSH_AUTH_SOCK SSH_AGENT_PID
  [[ -f ${HOME}/.ssh/ssh-agent-setup ]] && source ${HOME}/.ssh/ssh-agent-setup
  eval $(ssh-agent -s) || (ssh_clean && ssh_start)

  # Moved from tmux
  function _ssh_auth_save() {
    ln -sf "${SSH_AUTH_SOCK}" "${HOME}/.ssh/ssh-auth-sock.${HOSTNAME}"
  }
  # alias screen='_ssh_auth_save ; $(which screen)'
  # alias tmux='_ssh_auth_save ; $(which tmux)'
fi

function _load_ssh_key_from_passman () {
  local key=${@}
  # reload ssh keys into agent daily from lastpass
  if ! $(ssh-add -l 2> /dev/null | grep -q "/.ssh/id_rsa${key}\ ("); then
    # TODO: better integrate passphrase from passman? https://svkt.org/~simias/lpass/#ssh-agent
    (umask 177
    # workaround since this sometimes creates a directory
    [[ -d ~/.ssh/id_rsa${key} ]] && rmdir ~/.ssh/id_rsa${key}
    [[ -f ~/.ssh/id_rsa${key} ]] || touch ~/.ssh/id_rsa${key}
    op get item "id_rsa${key}" --fields notes > ~/.ssh/id_rsa${key}
    )
    op get item "id_rsa${key}" --fields Passphrase | pbcopy
    ssh-add -q -t 43200 -k ~/.ssh/id_rsa${key}
    [[ ${?} -ne 0 ]] && echo "Failed to load \"~/.ssh/id_rsa${key}\"!"
    # keep only work private key on filesystem so container mounts have it
    [[ -z ${key} ]] || rm -f ~/.ssh/id_rsa${key}
    (umask 177
    op get item "id_rsa${key}" --fields "Public Key" > ~/.ssh/id_rsa${key}.pub
    )
  fi
}
for ssh_key in "" _personal ; do
  _load_ssh_key_from_passman ${ssh_key}
done
[[ ${at_work} || $(port ${CUSTOM_WORK_K8S_DOMAIN}:443 &>/dev/null) ]] \
  && for ssh_key in _k8s-prod _k8s-staging _k8s-dawn; do
    _load_ssh_key_from_passman ${ssh_key}
done

# remove next line if work gets vault
return
# reload ssh keys into agent  daily from vault into agent
if [[ ${VAULT_REACHABLE} != "true" ]]; then
  echo "Skip loading of more ssh-keys as vault is unreachable."
  return
fi
for key3 in jenkins-builder coreos ; do
  if ! $(ssh-add -l 2> /dev/null | grep -q "/.ssh/id_rsa_${key3}\ (" ); then
    (umask 177
    # vault read -field=private-key secret/ssh-keys/${key3} > ~/.ssh/id_rsa_${key3}
    curl -s -H "X-Vault-Token: $(cat ~/.vault-token)" \
      ${VAULT_ADDR}/v1/secret/ssh-keys/${key3} \
      | jq -r '.data."private-key"' > ~/.ssh/id_rsa_${key3}
    )
    ssh-add -t 36000 -k ~/.ssh/id_rsa_${key3}
    rm -f ~/.ssh/id_rsa_${key3}
    # TODO: ssh-agent can load keys without a file
    # but they cant be referenced with "ssh -i <key_path>":
    # ssh-add - <<< $(vault read -field=private-key secret/ssh-keys/blah)
  fi
done
