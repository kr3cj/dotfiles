[[ $- = *i* ]] || return
${IS_MACOS} || return
${HEALTHY_INTERNET} || return

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
at_work="false"
at_home="false"
is_weekend=""
if [[ $(date +%a) =~ (Sat|Sun) && -z ${is_weekend} ]]; then
  is_weekend="true"
else
  is_weekend="false"
fi

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | tr "\n" ' ')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET} ]]; then
  at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET} ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share/pictures ~/Pictures/share1
    # add printer
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}

function _check_socks_proxy {
  local host1=${1}
  local port1=${2}
  local host1_ip="$(dig @1.1.1.1 +short ${host1} | grep '^[.0-9]*$' | tail -n1)"
  local response
  response="$(curl --connect-timeout 5 --silent --socks5 localhost:${port1} https://ifconfig.me | grep '^[.0-9]*$' | tail -n1)"
  if [[ "${response}" != "${host1_ip}" ]] ; then
    return 1
  else
    return 0
  fi
}
function _create_socks_proxy {
  local host1=${1}
  local port1=${2}
  # local ssh_proxy_options="-o ServerAliveInterval=30 -o ServerAliveCountMax=5 -f -N -D "
  local ssh_proxy_options="-f -N -D "
  [[ ${VERBOSE} -ge 1 ]] && ssh_proxy_options="-vvv ${ssh_proxy_options}"
  local ssh_proxy_response_file="/var/tmp/ssh_proxy_response.txt"
  # clear contents of response file
  :> ${ssh_proxy_response_file}
  local response

  if ! _check_socks_proxy ${host1} ${port1}; then
    echo "socks proxy not connected/working; first kill any old sessions"
    pgrep -f "ssh ${ssh_proxy_options} ${port1} ${host1}" && \
    pkill -f "ssh ${ssh_proxy_options} ${port1} ${host1}"

    echo -e "\nEstablishing ssh tunnel with ${host1}:${port1} \
     (ssh ${ssh_proxy_options} ${port1} \"${host1}\")"
    if ! port ${host1}:22 &> /dev/null; then
      echo "ERROR: Skipping ${FUNCNAME[0]}; unable to connect to \"${host1}:22\"."
      return 1
    else
      /usr/bin/ssh ${ssh_proxy_options} ${port1} ${host1}
    fi
  fi
  # if [[ -s ${ssh_proxy_response_file} ]]; then
  #   echo "Unable to establish ssh connection to ${host1}."
  #   echo "  curl response: \"${response}\""
  #   echo "  host1_ip response: \"${host1_ip}\""
  #   echo -e "  ssh proxy response:\n$(cat ${ssh_proxy_response_file})"
  #   return 1
  # fi
}

function work_aws-sso {
  if aws-sso list Expires | grep Default | grep -q Expired; then
  # if [[ $(aws --profile saml configure get x_security_token_expires) < $(gdate --iso-8601=seconds) ]]; then
    # make sure we are authenticated to password manager
    export OP_SESSION_my="$(head -n1 ~/.pm_session_token)"
    _passman_needs_auth || _passman_auth
    pm && echo "Unlock your password manager browser extension now..."
    sleep 5
    open -n -a "Brave Browser" --args https://github.com/${CUSTOM_WORK_DOMAINS[1]/.com} --profile-directory="Default"
    sleep 10
    # no known way to bypass browser for ${CUSTOM_WORK_SSO_PROVIDER} (with MFA) or aws-sso
    aws-sso console \
     --account="${CUSTOM_WORK_DEFAULT_AWS_ACCT}" \
     --profile="${CUSTOM_WORK_DEFAULT_AWS_PROFILE}" \
     --region="${AWS_DEFAULT_REGION}"
  fi
}

# only proceed on work system
${IS_ARM} || return
${is_weekend} && ${IS_ARM} || work_saml2aws
work_aws-sso
# if necessary, authenticate to docker repos (must be after aws auth)
if ! jq -e '.auths | has("'"${CUSTOM_WORK_DEFAULT_AWS_ACCT}"'.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com")' \
 ~/.docker/config.json > /dev/null || \
 [[ -n $(find ~/.docker/ -mindepth 1 -maxdepth 1 -name config.json -mmin +720) ]] ; then
  docker-login
fi

[[ $(pwd) == "${HOME}" ]] && cd ~/build/github/ibex
