[[ $- = *i* ]] || return
${IS_MACOS} || return
${HEALTHY_INTERNET} || return

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
at_work="false"
at_home="false"

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET}.*.* ]]; then
  at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET}* ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function on_vpn {
  if [[ ${ip_address} =~ ${CUSTOM_WORK_VPN_SUBNET} ]]; then
    # ping -c1 -W1 -i0.1 tools.${CUSTOM_WORK_DOMAINS[0]} &> /dev/null
    # local response=$(curl https://${CUSTOM_WORK_K8S_DOMAIN}/version?timeout=2s \
    #   --insecure \
    #   --silent \
    #   --show-error \
    #   --write-out "%{http_code}" \
    #   --output /dev/null \
    #   --connect-timeout 2 \
    #   --max-time 5)
    # if [[ ${response} -eq 200 ]]; then
    # return $(port ${CUSTOM_WORK_K8S_DOMAIN}:443 &>/dev/null)
    /opt/cisco/anyconnect/bin/vpn state | grep -q Connected
    return ${?}
  else
    return 1
  fi
}

function _create_socks_proxy {
  local host1=${1}
  local port1=${2}
  local test_url=${3:-"http://www.google.com"}
  local ssh_proxy_options="-f -N -D"
  [[ ${VERBOSE} -ge 1 ]] && ssh_proxy_options="-vvv ${ssh_proxy_options}"
  local ssh_proxy_response_file="/var/tmp/ssh_proxy_response.txt"
  # clear contents of response file
  > ${ssh_proxy_response_file}
  local response

  # note: lsof still returns a row when port open but dead: lsof -nP -i4TCP:${port1} | grep -q LISTEN
  # --socks5-hostname
  response=$(curl \
    --connect-timeout 2 \
    --silent \
    --output /dev/null \
    --write-out "%{http_code}" \
    --head \
    --socks5 localhost:${port1} \
    ${test_url})
  if [[ ${response} -ne 200 ]] ; then
    # first kill any old sessions
    pgrep -f "ssh ${ssh_proxy_options} ${port1} ${host1}"
    pkill -f "ssh ${ssh_proxy_options} ${port1} ${host1}"

    echo "Establishing ssh tunnel with ${host1}:${port1}..."
    if ! $(port ${host1}:22 &> /dev/null); then
      echo "ERROR: Skipping ${FUNCNAME[0]}; unable to connect to \"${host1}:22\"."
      return 1
    fi
    if [[ ${host1} == "home.${CUSTOM_HOME_DOMAIN}" || \
    ${host1} == "proxy.${CUSTOM_HOME_NAS_HOST#*\.}" ]]; then
      passman "proxy.${CUSTOM_HOME_NAS_HOST#*\.}"
    fi
    # ssh options moved to ~/.ssh/config
    #  -o TCPKeepAlive=yes -o ConnectTimeout=1 -o ConnectionAttempts=1 \
    #  -o ServerAliveInterval=120 -o ServerAliveCountMax=2 \
    /usr/bin/ssh ${ssh_proxy_options} ${port1} "${host1}" 2> ${ssh_proxy_response_file}
  fi
  if [[ -s ${ssh_proxy_response_file} ]]; then
    echo "Unable to establish ssh connection to ${host1}."
    echo "  curl response: \"${response}\""
    echo -e "  ssh proxy response:\n$(cat ${ssh_proxy_response_file})"
    return 1
  fi
}

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    sudo umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    sudo umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/share/pictures ~/Pictures/share1
    # add printer
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}
function work_saml2aws {
  if ! session_is_active saml2aws; then
    # ${HOME}/.asdf/shims/saml2aws exec -- aws sts get-caller-identity --query Arn --output text > /dev/null

    # --mfa-token not supported yet for ${CUSTOM_WORK_SSO_PROVIDER}
    # otp "${CUSTOM_WORK_DOMAINS[0]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}"
    otp-cli show -1 -c -s ${CUSTOM_WORK_SSO_PROVIDER} # | awk '/[0-9].*/{print $2}'
    saml2aws login --skip-prompt # remove --skip-prompt once when pw is changed
    if [[ ${?} == 0 ]]; then
      session_is_active saml2aws "${SAML2AWS_SESSION_DURATION} seconds" || true
      # open -a "Brave Browser" --args --profile-directory=Work "https://${CUSTOM_WORK_DOMAINS[0]/.com/}.${CUSTOM_WORK_SSO_PROVIDER}.com"
    else
      echo "Has your password changed? Try removing keychain and run \"saml2aws login\""
    fi
    clear_clip 10
  fi
}
function work_vpn {
  # see https://gist.github.com/p120ph37/10999344 for cisco automatio with split tunnel
  if ! on_vpn; then
    echo ""
    if read -t 2 -s -p "To connect to work VPN, press enter key within 2 seconds..."; then
      echo ""
      unmount_home_nfs

      # echo "Killing gui"
      pgrep -f AnyConnect
      pkill -f AnyConnect
      /opt/cisco/anyconnect/bin/vpn disconnect vpn.${CUSTOM_WORK_DOMAINS}

      # make sure we are authenticated to password manager
      export OP_SESSION_my="$(head -n1 ~/.pm_session_token)";
      _passman_needs_auth || _passman_auth;

      /opt/cisco/anyconnect/bin/vpn -s < <(
        echo connect vpn.${CUSTOM_WORK_DOMAINS}
        echo ${LOGNAME}@${CUSTOM_WORK_DOMAINS[0]}
        op get item "${CUSTOM_WORK_DOMAINS[0]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}" --fields "password" --cache --session ${OP_SESSION_my}
        op get totp "${CUSTOM_WORK_DOMAINS[0]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}" --cache --session ${OP_SESSION_my} | cut -c1-6
      )
      # echo ""
      clear_clip 20
    # else
      # mount_home_nfs
      # _create_socks_proxy "proxy.${CUSTOM_HOME_NAS_HOST#*\.}" "2000"
    fi
  fi
}

work_saml2aws
work_vpn
${at_work} && _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"

# if ${at_home}; then
#   if $(ping -c1 -W1 -i0.1 ${CUSTOM_HOME_NAS_HOST} &> /dev/null); then
#     mount_home_nfs
#     # openit "Backup and Sync"
#   fi
# elif ${at_work}; then
#   work_saml2aws
#   _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"

#   # open desktop apps (TODO: --background not working for Slack and Atom)
# openit Slack "Visual Studio Code"
#   unmount_home_nfs
#   work_vpn
# else
#   unmount_home_nfs
#   work_vpn
#   # # establish SSH tunnel to home proxy
#   # _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"
# fi
