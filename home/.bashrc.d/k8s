[[ $- = *i* ]] || return
${IS_OSX} || return

export KUBECONFIG=~/.kube/config
source <(kubectl completion bash)

# k8s auth
[[ -f ~/.k8s_auth ]] && source ~/.k8s_auth

function set_kube_current_config()
{
  [[ -f ~/.k8s_auth ]] && source ~/.k8s_auth

  KUBE_VAULT_DEPLOY_CONTAINER_NAME="readytalk/kube-vault-deploy:kube-auth"
  # KUBE_VAULT_DEPLOY_CONTAINER_NAME="readytalk/kube-vault-deploy:latest"
  if [[ ${VAULT_REACHABLE} != "true" ]]; then
    (>&2 echo "Skipping set_kube_current_config as vault is unreachable...")
    return 1
  fi

  local KOPS_NAME="${@}"
  if [[ -z ${KOPS_NAME} ]]; then
    (>&2 echo "You did not provide a default kops name argument.")
    return 1
  fi
  if [[ ${KOPS_NAME} =~ "\." ]]; then
    (>&2 echo "You did not provide a fully qualified kops name argument.")
    return 1
  fi
  if [[ -z $(kubectl config current-context) ]];then
    (>&2 echo "\"kubectl config current-context\" is blank!")
    return 1
  fi

  echo -e "\${KOPS_NAME}=\"${KOPS_NAME}\"; \${KOPS_STATE_STORE}=\"${KOPS_STATE_STORE}\"; \
  \${KOPS_STATE_STORE_REGION}=\"${KOPS_STATE_STORE_REGION}\""
  echo -e "Using container:tag \"${KUBE_VAULT_DEPLOY_CONTAINER_NAME}\"; is this correct?\n"
  read -p "Press any key to continue or CTRL+C to abort."

  # open Docker if necessary
  pgrep -qf "Docker.app" || open --hide --background -a Docker
  # uses vault to auth to s3 bucket so you don't need AWS env variables
  # should populate ~/.kube/config file with appropriate environment info
  lpass show --password --clip LDAP
  docker run --rm \
    -it \
    -e VAULT_ADDR=${VAULT_ADDR} \
    -e VAULT_TOKEN=$(cat ~/.vault-token) \
    -e CLUSTER_NAME=${KOPS_NAME} \
    -e ACCOUNT_NAME=sre-sa \
    -e CONTEXT_NAME=${KOPS_NAME} \
    -v ~/.kube:/kube-config \
    ${KUBE_VAULT_DEPLOY_CONTAINER_NAME}
  clear_clip

  # kops export kubecfg ${KOPS_NAME}
}
function set_kube_current_config_old()
{
  local KOPS_NAME="${@}"
  if [[ -z ${KOPS_NAME} ]]; then
    (>&2 echo "You did not provide a default kops name argument.")
    return 1
  fi
  if [[ ${KOPS_NAME} =~ "\." ]]; then
    (>&2 echo "You did not provide a fully qualified kops name argument.")
    return 1
  fi
  if [[ -z ${KOPS_STATE_STORE} ]]; then
    (>&2 echo "\${KOPS_STATE_STORE} is blank; unable to retrieve kubeconfig from s3.")
    return 1
  fi
  if [[ -z $(kubectl config current-context) ]];then
    (>&2 echo "\"kubectl config current-context\" is blank!")
    return 1
  fi
  kops export kubecfg --name $(kubectl config current-context)
  kubectl config use-context $(kubectl config current-context)
}
function set_kube_current_ns()
{
  if hash kubectl 2>/dev/null ; then
    local ns="${1:-utilities}"
    kubectl config set-context $(kubectl config current-context) --namespace=${ns}
  fi
}
alias knc=set_kube_current_config
alias kns=set_kube_current_ns
alias kubedash="kubectl get po -n=kube-system | grep dashboard | awk '{print \$1}' | \
  xargs -I % kubectl port-forward % 9090 -n=kube-system"
alias kwatch="watch kubectl get no,ds,deploy,po,svc,ing,cm,pvc,secret"

function helm_diff()
{
  helm get values -a ${product}-${environment} > before.yaml
  helm upgrade --dry-run --debug --wait --reuse-values --timeout 600 -f values.yaml -f "${environment}-values.yaml" -f "versions.yaml" "illuminate-${environment}" . | sed -n '/COMPUTED VALUES:/,/HOOKS:/{/COMPUTED VALUES:/b;/HOOKS:/b;p}' > preview.yaml
  diff before.yaml preview.yaml
  rm before.yaml preview.yaml

  # or
  https://github.com/databus23/helm-diff
}
