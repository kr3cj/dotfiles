[[ $- = *i* ]] || return
${IS_OSX} || return

export KUBECONFIG=~/.kube/config
# source $(brew --prefix)/etc/bash_completion
# source /usr/local/etc/bash_completion
source <(kubectl completion bash)

export KOPS_STATE_STORE="s3://foxden-k8s-cluster-state"

function set_kube_current_config()
{
  local kops_name="${@}"
  if [[ -z ${kops_name} ]]; then
    echo "You did not provide a default kops name argument."
    return 1
  fi
  if [[ ${kops_name} =~ "\." ]]; then
    echo "You did not provide a fully qualified kops name argument."
    return 1
  fi
  if [[ -z ${KOPS_STATE_STORE} ]]; then
    echo "\${KOPS_STATE_STORE} is blank; unable to retrieve kubeconfig from s3."
    return 1
  fi
  if [[ -z $(kubectl config current-context) ]];then
    echo "\"kubectl config current-context\" is blank!"
    return 1
  fi
  kops export kubecfg --name $(kubectl config current-context)
  kubectl config use-context $(kubectl config current-context)
}
function set_kube_current_ns()
{
  if hash kubectl 2>/dev/null ; then
    local ns="${1:-utilities}"
    kubectl config set-context $(kubectl config current-context) --namespace=${ns}
  fi
}
alias knc=set_kube_current_config
alias kns=set_kube_current_ns
alias kubedash="kubectl get po -n=kube-system | grep dashboard | awk '{print \$1}' | \
  xargs -I % kubectl port-forward % 9090 -n=kube-system"
