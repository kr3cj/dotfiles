[[ $- = *i* ]] || return
${IS_MACOS} || return
# http://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html

export AWS_SESSION_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h
export AWS_ASSUME_ROLE_TTL=1h # 4h for devtoolsSandboxAccountAccessRole
export AWS_DEFAULT_REGION=us-east-1
export SAML2AWS_SESSION_DURATION=43200 # 12 hour max for "saml2aws login"
export SAML2AWS_MFA="TOTP"
# export SAML2AWS_PROFILE=

function saml2aws {
  # saml2aws logins can have a max session duration of 12h, but role chaining can only have a max session duration of 1h
  local args="--session-duration=${SAML2AWS_SESSION_DURATION} \
    --role=${CUSTOM_WORK_IAM_ROLE} \
    --mfa=${SAML2AWS_MFA} \
    --skip-prompt"
  if [[ ${@} =~ "--exec-profile" ]] ; then
    export MY_AWS_PROFILE=$(echo ${@} | sed -r 's/.*--exec-profile[=,\ ]([^ ]+).*/\1/')
    args="--session-duration=3600"
  fi
  if [[ ${@} =~ "helmfile-" || ${@} =~ "-cluster" || ${@} =~ "common-" ]] ; then
    # "need to cache work private ssh key"
    lpass show --field=Passphrase --clip "id_rsa"
  fi
  # lpass show --password --clip "${CUSTOM_WORK_DOMAINS[0]/.com/} macbook" || echo "Unable to cache pw."
  # echo "Running \"saml2aws ${args} --skip-prompt ${*}\""
  $(which saml2aws) ${args} ${*}
}

function get-ec2-id-from-pod ()
{
  # only requires kube config with correct context and namespace set
  kubectl --kubeconfig ~/.kube/${1} \
   get no/$(kubectl --kubeconfig ~/.kube/${1} get po/${2} -ojsonpath='{.spec.nodeName}') \
    -ojsonpath='{.metadata.labels.alpha\.eksctl\.io/instance-id}' ; echo

  # alternative requires exec'ing into container and the curl binary
  # kubectl exec -it ${@} -- curl http://169.254.169.254/latest/meta-data/instance-id ; echo
}
function get-ec2-hostname-from-pod ()
{
  # only requires kube config with correct context set
  kubectl --kubeconfig ~/.kube/${1} get po/${2} -ojsonpath='{.spec.nodeName}' ; echo # '{.status.hostIP}'

  # fall back requires exec'ing into container and the curl binary
  # kubectl exec -it ${@} -- curl http://169.254.169.254/latest/meta-data/hostname ; echo
}
function get-ec2-id-from-hostname ()
{
  # takes in two parameters: kube config name (assumes one cluster per config) and ec2 hostname
  # (k8s-a which is in us-east-2 so hostnames include the region which should be filtered)
  # only requires kube config with correct context set
  kubectl --kubeconfig ~/.kube/${1} get no/${2/us-east-2.compute/ec2} -ojsonpath="{.metadata.labels.alpha\.eksctl\.io/instance-id}" \
    ; echo

  # if [[ -n ${result} ]]; then
  #   echo ${result}
  # else
  #   # echo "Falling back for non-k8s nodes (requires ssh access)""
  #   ssh ${@/us-east-2.compute/ec2} "curl --silent http://169.254.169.254/latest/meta-data/instance-id" ; echo
  # fi
}
function get-ec2-hostname-from-id ()
{
  # takes in two parameters: kube config name (assumes one cluster per config) and ec2 instance id
  # if a k8s node, only requires kube config with correct context set
  kubectl --kubeconfig ~/.kube/${1} get no \
    -o=jsonpath="{.items[?(@.metadata.labels.alpha\.eksctl\.io/instance-id=='${2}')].metadata.name}" \
    ; echo

  # if [[ -n ${result} ]]; then
     # echo ${result}
  # else
  #   echo "Falling back for non-k8s nodes (requires saml2aws, aws-cli)"
  #   # takes in two paramters: instance-id and saml2aws profile
  #   saml2aws exec --exec-profile=${2} -- \
  #     aws ec2 describe-instances \
  #     --instance-ids ${1} \
  #     --query Reservations[].Instances[].PrivateDnsName \
  #     --output text
  # fi
}
