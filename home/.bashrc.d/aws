[[ $- = *i* ]] || return
${IS_OSX} || return
# http://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html

export AWS_SESSION_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h
export AWS_ASSUME_ROLE_TTL=1h # 4h for devtoolsSandboxAccountAccessRole
export SAML2AWS_SESSION_DURATION=43200

function saml2aws {
  if ! [[ "$(greadlink -f ~/.aws/config)" =~ "config-saml2aws" ]]; then
    rm ~/.aws/config && ln -s ~/.aws/config-saml2aws ~/.aws/config
  fi
  lpass show --password --clip "${CUSTOM_WORK_DOMAINS[0]/.com/} main (one login)" || echo "Unable to cache pw."
  $(which saml2aws) --session-duration=43200 --skip-prompt ${*}
}
function assume-role {
  if ! [[ "$(greadlink -f ~/.aws/config)" =~ "config-saml2aws" ]]; then
    rm ~/.aws/config && ln -s ~/.aws/config-saml2aws ~/.aws/config
  fi

  export AWS_PROFILE=${1}
  $(which assume-role) ${*}
}
function aws-vault {
  if ! [[ "$(greadlink -f ~/.aws/config)" =~ "config-aws-vault" ]]; then
    rm ~/.aws/config && ln -s ~/.aws/config-aws-vault ~/.aws/config
  fi
  lpass show --password --clip "${CUSTOM_WORK_DOMAINS[0]/.com/} macbook" || echo "Unable to cache pw."
  $(which aws-vault) ${*}
}
function awslogin {
  aws-vault login ${@}
}

function get-ec2-id-from-pod ()
{
  # only requires kube config with correct context and namespace set
  local cluster=${1}
  shift
  eks ${cluster}
   get no/$(eks ${cluster} get po/${2} -ojsonpath='{.spec.nodeName}') \
    -ojsonpath='{.spec.externalID}' ; echo

  # alternative requires exec'ing into container and the curl binary
  # kubectl exec -it ${@} -- curl http://169.254.169.254/latest/meta-data/instance-id ; echo
}
function get-ec2-hostname-from-pod ()
{
  # only requires kube config with correct context set
  local cluster=${1}
  shift
  eks ${cluster} get po/${2} -ojsonpath='{.spec.nodeName}' ; echo # '{.status.hostIP}'

  # fall back requires exec'ing into container and the curl binary
  # kubectl exec -it ${@} -- curl http://169.254.169.254/latest/meta-data/hostname ; echo
}
function get-ec2-id-from-hostname ()
{
  # takes in one parameter: ec2 hostname
  # (k8s-a which is in us-east-2 so hostnames include the region which should be filtered)
  # only requires kube config with correct context set
  local cluster=${1}
  shift
  local result=$(eks ${cluster} get no/${2/us-east-2.compute/ec2} -ojsonpath="{.spec.externalID}" \
    ; echo)

  if [[ -n ${result} ]]; then
    echo ${result}
  else
    # fall back requires ssh access
    ssh ${@/us-east-2.compute/ec2} "curl --silent http://169.254.169.254/latest/meta-data/instance-id" ; echo
  fi
}
function get-ec2-hostname-from-id ()
{
  # takes in one parameter: ec2 instance id
  # if a k8s node, only requires kube config with correct context set
  local cluster=${1}
  shift
  local result=$(eks ${cluster} get no \
    -o=jsonpath="{.items[?(@.metadata.labels.alpha\.eksctl\.io/instance-id==\"${2}\")].metadata.name}" \
    ; echo)

  # if [[ -n ${result} ]]; then
     echo ${result}
  # else
  #   echo "Falling back for non-k8s nodes (requires aws-vault, MFA token, aws-cli)"
  #   # takes in two paramters: instance-id and aws-vault profile
  #   aws-vault exec ${2} -- \
  #     aws ec2 describe-instances \
  #     --instance-ids ${1} \
  #     --query Reservations[].Instances[].PrivateDnsName \
  #     --output text
  # fi
}
