#  troubleshooting
# [[ ${HISTSIZE} -lt 1000000 ]] && echo -e "\nSomething has overridden \${HISTSIZE} to ${HISTSIZE}!!!\n"

[[ -f ~/.base_homeshick_vars ]] && source ~/.base_homeshick_vars
export IS_MACOS="false"
export IS_LINUX="false"
case "$(uname)" in
  Darwin)
    export IS_MACOS="true" ;;
  Linux)
    export IS_LINUX="true" ;;
  *)
    echo "Unable to determine linux or macos" ;;
esac

alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ducks="sudo du -cshx ./ | sort -h"
alias cdd="homeshick cd dotfiles"
alias cdp="homeshick cd dotfiles_private"
alias pp="source ~/.bash_profile"

function cb() {
  cd ~/build/github/${@}
}

function pathadd() {
  unset newpath
  local newpath=${1%/}
  if [[ ! -d "${newpath}" ]] ; then
    # echo "Directory \"${1}\" does not exist."
    return
  fi
  if [[ "${PATH}" =~ (^|:)"${newpath}"(:|$) ]] ; then
    # echo "Path \"${newpath}\" already exists in path \"${PATH}\"."
    return
  fi
  if [[ "${2}" == "after" ]] ; then
    export PATH="${PATH}:${newpath}"
  else
    export PATH="${newpath}:${PATH}"
  fi
}

function port {
  # strip http.* from parameter
  local host1=${1#*//}
  # find port from either "server1:1234" or "server1 1234"
  local port1
  if [[ -n ${2} ]] && [[ ${host1} =~ ":" ]]; then
    (>&2 echo "  detected multiple port inputs; using ${2}")
    port1=${2}
    # strip port from host variable
    host1=${host1%:*}
  elif [[ -n ${2} ]]; then
    port1=${2}
  elif [[ -z ${2} ]] && [[ ${host1} =~ ":" ]]; then
    port1=${host1#*:}
    # strip port from host variable
    host1=${host1%:*}
  elif [[ -z ${2} ]] && [[ ! ${host} =~ ":" ]]; then
    (>&2 echo "You must supply a port number as an additional parameter or append \":1234\".")
    return 1
  fi

  if ! [[ "${port1}" =~ ^[0-9]+$ ]]; then
    (>&2 echo "You supplied an incorrect port.")
    return 1
  fi

  # echo "Checking host \"${host1}\" over port \"${port1}\"."
  ${timeout_path} 2 bash -c "echo >/dev/tcp/${host1}/${port1}" > /dev/null 2>&1 && echo success \
    || (>&2 echo "failure"; return 1)
}

function bashcurl {
  # utilizes https://stackoverflow.com/questions/5951029/read-http-output-using-shell-bash-script
  : ${DEBUG:=0}
  local URL=${1}
  local tag="Connection: close"
  local mark=0

  if [[ -z "${URL}" ]]; then
    printf "Usage: %s \"URL\" [e.g.: %s http://www.google.com/]" \
      "${FUNCNAME[0]}" "${FUNCNAME[0]} \
      "
    return 1;
  elif ! [[ "${URL}" =~ "https://" ]]; then
    URL="https://${URL}"
    echo "Updated \${URL} to \"${URL}\""
  fi
  read proto server path <<<$(echo ${URL//// })
  DOC=/${path// //}
  HOST=${server//:*}
  PORT=${server//*:}
  [[ x"${HOST}" == x"${PORT}" ]] && PORT=80
  [[ ${DEBUG} -eq 1 ]] && echo "HOST=${HOST}"
  [[ ${DEBUG} -eq 1 ]] && echo "PORT=${PORT}"
  [[ ${DEBUG} -eq 1 ]] && echo "DOC =${DOC}"

  exec 5<>/dev/tcp/${HOST}/${PORT}
  echo -en "GET ${DOC} HTTP/1.1\r\nHost: ${HOST}\r\n${tag}\r\n\r\n" >&5
  while read line; do
    [[ $mark -eq 1 ]] && echo ${line}
    if [[ "${line}" =~ "${tag}" ]]; then
      mark=1
    fi
  done <&5
  exec 5>&-
}

function acp {
  cp -av ${1} ${1}.$(date --rfc-3339=date)
}

function find-error() {
  sudo grep -A2 -B2 -riHE 'DENIED|ERR|EXIST|FAIL|INVALID|SPECIFIED|SUCH|UNABLE|WARN|USAGE:|UNKNOWN|:\ LINE\ [0-9]' ${1} \
  | grep -v ierra \
  | grep -v erra
}

# https://github.com/chubin/awesome-console-services
function speedtest {
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py \
  | python - --secure --simple --single
  # includes bufferbloat score: http://www.dslreports.com/speedtest
}

function update-all-repos {
  for repo1 in $(find ~/build/github -mindepth 1 -maxdepth 6 -path "*/.git/config") ; do echo -e "\n${repo1%.git/config}" ; \
    cd ${repo1%.git/config} \
    && git clean -xfd \
    && gitp \
    && cd - ; \
  done
}

function whatismyip {
  curl ifconfig.me
}

function netshoot {
  # spin up a throwaway container in k8s for network debugging
  kubectl --kubeconfig ~/.kube/${1} run --generator=run-pod/v1 \
    tmp-shell --rm -i --tty --image nicolaka/netshoot -- /bin/bash
}

function mysql-client {
  # spin up a throwaway container in k8s for querying RDS
  kubectl --kubeconfig ~/.kube/${1} run --generator=run-pod/v1 \
    tmp-shell --rm -i --tty --image arey/mysql-client -- \
      mysql -P3306 -h"${2}.us-east-1.rds.amazonaws.com" -u"user1" -p"SeeLastPass"
  # docker run --rm -it alpine:latest sh
  #   apk add bash mysql-client
  #   mysql -h"something.us-east-1.rds.amazonaws.com" -P"3306" -u"user1" -p"SeeLastPass"

}

function weather {
  curl https://wttr.in/Denver
}

if [[ "${IS_MACOS}" == "true" ]]; then
  alias curl="/usr/local/opt/curl/bin/curl"
  # since the path file hasn't been sourced yet, use absolute paths to ls for macos
  alias ls="/usr/local/opt/coreutils/libexec/gnubin/ls -G --color=auto"
  alias ll="/usr/local/opt/coreutils/libexec/gnubin/ls -hl -G --color=auto"
  alias srm="/bin/rm -vP"
  alias slack="open -a Slack"
  alias spotify="open -a Spotify"
  # alias pia="nohup ~/.pia_manager/pia_manager.app/Contents/MacOS/runner.sh >/dev/null 2>&1 &"
  # alias gphoto="open --background -a \"Google Photos Backup\""
  # alias gphoto="open --background -a \"Backup and Sync\""

  function alfred {
    lpass show --password --clip "${CUSTOM_WORK_DOMAINS[0]/.com/} macbook" || echo "Unable to cache pw."
    $(which alfred) ${*}
    # $(which alfred) "${@}"
  }

  function keybase {
    lpass show --password --clip "Keybase" || echo "Unable to cache pw."
    $(which keybase) ${*}
  }

  function ack {
    $(which ack) "${@}" --ignore-dir=.terraform
  }

  function clear_clip {
    # clear clipboard after N seconds
    local wait_time="${1:-0}"
    (
      {
        sleep ${wait_time}
        pbcopy < /dev/null
      } & disown
    ) 2> /dev/null
  }

  function lpass {
    # # if the first variable is an integer, then clear clipboard
    # local clear_clip_delay
    # if [[ ${1} =~ ^-?[0-9]+$ ]] ; then
    #   clear_clip_delay=${1}
    # fi
    $(which lpass) "${@}"

    # if [[ ${clear_clip_delay} -gt 0 ]]; then
    #   clear_clip ${1}
    # fi
  }

  function otp {
    otp-cli show -1 -c -s ${CUSTOM_WORK_SSO_PROVIDER} | awk '/[0-9].*/{print $2}'
  }

  if [[ ${TRAVIS_CI_RUN} != true ]]; then
  # travis build barf on the matching syntax
    eval "function ssh {
      # us-east-2 is non-default at current work, so hostnames include that, so filter it
      local host1=\"\${@/us-east-2.compute/ec2}\"
      case \"\${host1}\" in
        ${CUSTOM_WORK_SUBNET}.*|$(echo ${CUSTOM_WORK_DOMAINS[@]/#/*.}|tr ' ' '|'))
          lpass show --password --clip \"${CUSTOM_WORK_DOMAINS[0]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}\";;
        home.${CUSTOM_HOME_DOMAIN})
          lpass show --password --clip \"proxy.${CUSTOM_NAS_HOST#*\.}\" ;;
        nas|nas.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"nas.${CUSTOM_NAS_HOST#*\.}\" ;;
        web|web.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"web.${CUSTOM_NAS_HOST#*\.}\" ;;
        ship|ship.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"ship.${CUSTOM_NAS_HOST#*\.}\" ;;
        plex|plex.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"plex.${CUSTOM_NAS_HOST#*\.}\" ;;
        proxy|proxy.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"proxy.${CUSTOM_NAS_HOST#*\.}\" ;;
        babycam|babycam.${CUSTOM_NAS_HOST#*\.})
          lpass show --password --clip \"babycam.${CUSTOM_NAS_HOST#*\.}\" ;;
        macbuild*)
          lpass show --password --clip AD ;;
      esac
      # using homebrew ssh $(which ssh) results in 'Bad configuration option: usekeychain'
      /usr/bin/ssh \${host1}
    }"
  fi

  function openit {
    # quickly opens macos programs in the background if not already running
    local -a programs=("${@}")
    local program1
    local -i item

    for ((item = 0; item < ${#programs[@]}; item++)); do
      program1="${programs[${item}]}"
      pgrep -qf "${program1}.app" || (nohup open --hide --background -a "${program1}" >/dev/null 2>&1 &)
    done
  }
elif [[ "${IS_LINUX}" == "true" ]]; then
  alias ls="ls --color=auto"
  alias ll="ls -hal --color=auto"
  alias list-services="systemctl list-unit-files --type=service | grep enabled | \
    cut -d. -f1 | sort"
  # enforce one use of clipboard memory
  # export LPASS_CLIPBOARD_COMMAND="xclip -selection clipboard -in -l 1"

  function aria() {
    $(which aria2c) \
    --continue=true \
    --always-resume=true \
    --seed-ratio=1.0 \
    --check-integrity=true \
    --dir=/share/ \
    ${1}
  }
  # -x2 \
fi
