# Workaround for OSX incompatibility with commercial routers
[[ $(sysctl -n net.link.ether.inet.arp_unicast_lim) -ne 1 ]] && \
  sudo sysctl -w net.link.ether.inet.arp_unicast_lim=1

# impatiently detect healthy internet connectivity
if $(curl github.com --connect-timeout 1 &> /dev/null); then
# TODO: move most of this to a script called after login or screen-unlock
#  (https://stackoverflow.com/questions/6442364/running-script-upon-login-mac)
  # set up network related profile

  # get network awaremenss
  ip_address=""
  at_work="false"
  at_home="false"

  # ssh agent stuff
  # make alias for ssh -> "ssh -A"?
  source ${HOME}/.ssh/ssh-agent-setup
  [[ -z "$(launchctl getenv SSH_AUTH_SOCK)" ]] && eval $(ssh-agent -s)
  [[ $(ssh-add -l | wc -l) -lt 3 ]] && ssh-add -k ~/.ssh/{id_rsa,id_rsa_coreos,id_rsa_hudson}

  # lastpass
  export LPASS_AGENT_TIMEOUT=172800
  if ! lpass status 2>/dev/null ; then lpass login --trust lastpass@${CUSTOM_HOME_DOMAIN} ; fi
  lpass show --password -c LDAP

  ip_address=$(/sbin/ifconfig en0 | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}')

  # figure out location
  ( [[ ${ip_address} =~ "${CUSTOM_WORK_SUBNET}.49." ]] || [[ ${ip_address} =~ "${CUSTOM_WORK_SUBNET}.200." ]] \
    || [[ ${ip_address} =~ "${CUSTOM_WORK_SUBNET}.67." ]] ) && at_work="true"
  [[ ${ip_address} =~ "${CUSTOM_HOME_SUBNET}" ]] && at_home="true"

  if ${at_home} ; then
    if $(ping -c1 -W1 -i0.1 ${CUSTOM_NAS_HOST} &> /dev/null) ; then
      # killall -HUP mountd
      mount | grep -q "Documents/share1" || mount -t nfs -o \
        vers=4,rw,soft,intr,bg,rsize=32768,wsize=32768,dsize=32768 \
        ${CUSTOM_NAS_HOST}:/share ~/Documents/share1
      mount | grep -q "Pictures/share1" || mount -t nfs -o \
        vers=4,rw,soft,intr,bg,rsize=32768,wsize=32768,dsize=32768 \
        ${CUSTOM_NAS_HOST}:/share/pictures ~/Pictures/share1
    fi
    # start google photos backup
    $(pgrep -q "Google Photos Backup") || \
      ("/Applications/Google Photos Backup.app/Contents/MacOS/Google Photos Backup" & ) &> /dev/null
    # $(ping -c1 -W1 -i0.1 laphroaig.${CUSTOM_WORK_DOMAINS[1]}) || /opt/cisco/anyconnect/bin/vpn connect readytalk
  elif ${at_work} ; then
    # SSH tunnel to datacenters
    lsof -n -i4TCP:2002 | grep -q LISTEN || ssh -f -N -D 2002 "${CUSTOM_LDAP_NAME}@forinf2.${CUSTOM_WORK_DOMAINS[0]}" -o TCPKeepAlive=yes 2>/dev/null
    lsof -n -i4TCP:2003 | grep -q LISTEN || ssh -f -N -D 2003 "${CUSTOM_LDAP_NAME}@laxinf2.${CUSTOM_WORK_DOMAINS[0]}" -o TCPKeepAlive=yes 2>/dev/null
    # set up SSH tunnel to home if not already set up
    # note: lsof still returns a row when the port is open but dead: lsof -n -i4TCP:2000 | grep -q LISTEN
    if [[ $(curl \
      --connect-timeout 1 \
      --silent \
      --output /dev/null \
      --write-out "%{http_code}" \
      --head \
      --socks5-hostname localhost:2000 \
      http://web.${CUSTOM_NAS_HOST#*\.}/that.gif \
      ) -ne 200 \
    ]] ; then
      echo "Establishing SSH Tunnel for SOCKS5 Proxy..."
      ssh -f -N -D 2000 ${CUSTOM_WORK_EMAIL/\.*/}@home.${CUSTOM_HOME_DOMAIN} \
        -o TCPKeepAlive=yes \
        -o ConnectTimeout=1 \
        -o ConnectionAttempts=1 \
        2>/dev/null
      [[ ${?} -ne 0 ]] && echo "Unable to establish ssh connection to \"home.${CUSTOM_HOME_DOMAIN}\""
    fi
    while $(mount | grep -q "Documents/share1") ; do
      sudo umount -fv -t nfs ${CUSTOM_NAS_HOST}:/share
    done
    while $(mount | grep -q "Pictures/share1") ; do
      sudo umount -fv -t nfs ${CUSTOM_NAS_HOST}:/share/pictures
    done
    # establish vpn connection to PGi
    # $(ping -c1 -w1 -i0.1 172.x.x.x &> /dev/null) || /opt/cisco/anyconnect/bin/vpn connect pgi
    pkill "Google Photos Backup"
  fi
else
  echo "Skipping network related profile tasks as there's no healthy internet connectivity."
fi
