# setup git
if ${IS_MACOS} ; then
  export GIT_SSH="/usr/bin/ssh"
fi

# shellcheck disable=SC2120
function gitp {
  local default_branch
  default_branch="$(git remote show origin | grep "HEAD branch" | awk '{print $3}')"
  local current_branch
  current_branch="$(git rev-parse --abbrev-ref HEAD)"
  local desired_branch=${1:-${current_branch}}

  [[ ${VERBOSE} -ge 1 ]] && echo "default_branch=${default_branch}; current_branch=${current_branch}; desired_branch=${desired_branch}"

  if ! [[ "${default_branch}" == "${current_branch}" ]]; then
    # if ! [[ "${current_branch}" =~ "master" || "${current_branch}" =~ ""]]; then
    case "${current_branch}" in
      default|dev|development|main|master|pending)
        echo "Update default branch: \
\"git branch -m master ${default_branch}; git fetch origin; git branch -u origin/main ${default_branch}\"" ;;
      *)
        echo -e "\n Default branch: \"${default_branch}\"\n Current branch: \"${current_branch}\"\n" ;;
    esac
  fi

  if ! [[ "${current_branch}" == "${desired_branch}" ]]; then
    echo "current_branch (${current_branch}) != desired_branch (${desired_branch}); checking out desired_branch..."
    git checkout ${desired_branch}
  fi
  git pull origin ${desired_branch}
  git fetch --prune --all
  if ! [[ "${current_branch}" == "${default_branch}" ]]; then
    # careful doing this on big, shared repos with branches having lots of churn
    # use slash instead of space to merge local instance's ${default_branch}
    echo "current_branch (${current_branch}) != default_branch (${default_branch}); merging local instance of default_branch..."
    git merge origin/${default_branch}
  fi

  local local_merged_branches=$(git branch --merged | grep -vE "${default_branch}|${current_branch}")
  local local_deleted_branches=$(git branch -vv | grep ': gone]' | grep -v '\*' | awk '{print $1}')
  [[ ${VERBOSE} -ge 1 ]] && echo "local_merged_branches=${local_merged_branches}; local_deleted_branches=${local_deleted_branches}"

  # delete local branches (excluding default and current) which have been merged
  if [[ -z ${local_merged_branches} ]]; then
    for br1 in ${local_merged_branches}; do
      echo -e "\nDeleting local branch \"${br1}\" that's already merged..."
      git branch -d "${br1}"
    done
  fi

  # delete local branches that were deleted upstream (ex: closed PRs; this doesn't get all of them?)
  if [[ -z ${local_deleted_branches} ]]; then
    for br1 in ${local_deleted_branches}; do
      echo -e "\nDeleting local branch \"${br1}\" that's not on remote (RISKY?!)..."
      git branch -d "${br1}"
    done
  fi
  if ! [[ "${desired_branch}" == "${current_branch}" ]]; then
    # conditionally warn if desired doesnt match current and suggest rebase?
    echo "You might consider running \"git pull --rebase origin ${desired_branch}\"..."
  fi
  # git pull --rebase origin ${desired_branch} # could be a problem if 2+ folks working on same branch
  git status
}

function update-all-repos {
  for repo1 in $(find ~/build/github -mindepth 1 -maxdepth 6 -path "*/.git/config") ; do echo -e "\n${repo1%.git/config}" ; \
    cd "${repo1%.git/config}" \
    && git clean -xfd \
    && gitp \
    && cd - || return; \
  done
}
