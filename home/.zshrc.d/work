[[ $- = *i* ]] || return
${IS_MACOS} || return
${HEALTHY_INTERNET} || return

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
at_work="false"
at_home="false"
is_weekend=""
if [[ $(date +%a) =~ (Sat|Sun) && -z ${is_weekend} ]]; then
  is_weekend="true"
else
  is_weekend="false"
fi

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | tr "\n" ' ')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET} ]]; then
  at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET} ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function on_vpn {
  if [[ ${ip_address} =~ ${CUSTOM_WORK_VPN_SUBNET} ]]; then
    # ping -c1 -W1 -i0.1 tools.${CUSTOM_WORK_DOMAINS[1]} &> /dev/null
    # local response=$(curl https://${CUSTOM_WORK_K8S_DOMAIN}/version?timeout=2s \
    #   --insecure \
    #   --silent \
    #   --show-error \
    #   --write-out "%{http_code}" \
    #   --output /dev/null \
    #   --connect-timeout 2 \
    #   --max-time 5)
    # if [[ ${response} -eq 200 ]]; then
    # return $(port ${CUSTOM_WORK_K8S_DOMAIN}:443 &>/dev/null)
    /opt/cisco/anyconnect/bin/vpn state | grep -q Connected
    return ${?}
  else
    return 1
  fi
}

function _check_socks_proxy {
  local host1=${1}
  local port1=${2}
  local host1_ip="$(dig @1.1.1.1 +short ${host1} | grep '^[.0-9]*$' | tail -n1)"
  local response
  response="$(curl --connect-timeout 5 --silent --socks5 localhost:${port1} https://ifconfig.me | grep '^[.0-9]*$' | tail -n1)"
  if [[ "${response}" != "${host1_ip}" ]] ; then
    return 1
  else
    return 0
  fi
}
function _create_socks_proxy {
  local host1=${1}
  local port1=${2}
  # local ssh_proxy_options="-o ServerAliveInterval=30 -o ServerAliveCountMax=5 -f -N -D "
  local ssh_proxy_options="-f -N -D "
  [[ ${VERBOSE} -ge 1 ]] && ssh_proxy_options="-vvv ${ssh_proxy_options}"
  local ssh_proxy_response_file="/var/tmp/ssh_proxy_response.txt"
  # clear contents of response file
  :> ${ssh_proxy_response_file}
  local response

  if ! _check_socks_proxy ${host1} ${port1}; then
    echo "socks proxy not connected/working; first kill any old sessions"
    pgrep -f "ssh ${ssh_proxy_options} ${port1} ${host1}" && \
    pkill -f "ssh ${ssh_proxy_options} ${port1} ${host1}"

    echo -e "\nEstablishing ssh tunnel with ${host1}:${port1} \
     (/usr/bin/ssh ${ssh_proxy_options} ${port1} \"${host1}\")"
    if ! port ${host1}:22 &> /dev/null; then
      echo "ERROR: Skipping ${funcstack[1]}; unable to connect to \"${host1}:22\"."
      return 1
    else
      /usr/bin/ssh ${ssh_proxy_options} ${port1} ${host1}
    fi
  fi
  # if [[ -s ${ssh_proxy_response_file} ]]; then
  #   echo "Unable to establish ssh connection to ${host1}."
  #   echo "  curl response: \"${response}\""
  #   echo "  host1_ip response: \"${host1_ip}\""
  #   echo -e "  ssh proxy response:\n$(cat ${ssh_proxy_response_file})"
  #   return 1
  # fi
}

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share/pictures ~/Pictures/share1
    # add printer
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}
function work_saml2aws {
  # TODO: use "grep x_security_token_expires ~/.aws/credentials" instead of custom timestamp
  if ! session_is_active saml; then
    # ${HOME}/.asdf/shims/saml2aws exec -- aws sts get-caller-identity --query Arn --output text > /dev/null

    # uncomment pbcopy once saml2aws over asdf on arm64 uses keychain
    # make sure we are authenticated to password manager
    export OP_SESSION_my="$(head -n1 ~/.pm_session_token)"
    _passman_needs_auth || _passman_auth
    # SAML2AWS_USERNAME="${LOGNAME}@${CUSTOM_WORK_DOMAINS[1]}"
    SAML2AWS_PASSWORD=$(op item get "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}" --fields "password" --cache --session ${OP_SESSION_my})
    SAML2AWS_MFA_TOKEN=$(otp "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}")

    saml login --password=${SAML2AWS_PASSWORD} --mfa-token=${SAML2AWS_MFA_TOKEN} --skip-prompt
    # remove --skip-prompt once when pw is changed
    if [[ ${?} == 0 ]]; then
      # TODO: remove in favor of "grep x_security_token_expires ~/.aws/credentials"
      session_is_active saml "${SAML2AWS_SESSION_DURATION} seconds" || true
      # docker-login
      # open -a "Brave Browser" --args --profile-directory=Work "https://${CUSTOM_WORK_DOMAINS[1]/.com/}.${CUSTOM_WORK_SSO_PROVIDER}.com"
    else
      echo "Has your password changed? Try removing keychain and run \"saml login\""
    fi
    unset SAML2AWS_PASSWORD SAML2AWS_MFA_TOKEN
  fi
}
function work_vpn {
  # see https://gist.github.com/p120ph37/10999344 for cisco automatio with split tunnel
  if ! on_vpn; then
    echo ""
    if read -t 2 -s "?Connecting to work VPN in 2 seconds, press Enter to skip..."; then
      echo ""
      # mount_home_nfs
      # _create_socks_proxy "proxy.${CUSTOM_HOME_NAS_HOST#*\.}" "2000"
    else
      echo ""
      unmount_home_nfs

      # make sure we are authenticated to password manager
      export OP_SESSION_my="$(head -n1 ~/.pm_session_token)"
      _passman_needs_auth || _passman_auth

      # TODO: why does this command take ~2min sometimes
      time /opt/cisco/anyconnect/bin/vpn disconnect vpn.${CUSTOM_WORK_DOMAINS[1]}
      # echo "Killing gui"
      pgrep -f AnyConnect
      pkill -f AnyConnect

      if ! $(port vpn.${CUSTOM_WORK_DOMAINS[1]}:443 &> /dev/null); then
        echo "ERROR: Skipping ${funcstack[1]}; unable to connect to \"vpn.${CUSTOM_WORK_DOMAINS[1]}:443\"."
        return 1
      fi

      /opt/cisco/anyconnect/bin/vpn -s < <(
        echo connect vpn.${CUSTOM_WORK_DOMAINS[1]}
        echo ${LOGNAME}@${CUSTOM_WORK_DOMAINS[1]}
        op item get "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER_OLD}" --fields "password" --cache --session ${OP_SESSION_my}
        otp "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER_OLD}"
      )
    fi
  fi
}

# only proceed on work system
${IS_ARM} || return
${is_weekend} && ${IS_ARM} || work_saml2aws
${is_weekend} || work_vpn
${at_work} && _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"
# pm

# [[ $(pwd) == "${HOME}" ]] && cd ~/build/github/ibex

# if ${at_home}; then
#   if $(ping -c1 -W1 -i0.1 ${CUSTOM_HOME_NAS_HOST} &> /dev/null); then
#     mount_home_nfs
#     # openit "Backup and Sync"
#   fi
# elif ${at_work}; then
#   work_saml2aws
#   _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"

#   # open desktop apps (TODO: --background not working for Slack and Atom)
# openit Slack "Visual Studio Code"
#   unmount_home_nfs
#   work_vpn
# else
#   unmount_home_nfs
#   work_vpn
#   # # establish SSH tunnel to home proxy
#   # _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"
# fi
