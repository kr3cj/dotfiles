[[ $- = *i* ]] || return 0
${IS_MACOS} || return 0
${HEALTHY_INTERNET} || return 0

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
export at_work="false"
at_home="false"
is_weekend=""
if [[ $(date +%a) =~ (Sat|Sun) && -z ${is_weekend} ]]; then
  is_weekend="true"
else
  is_weekend="false"
fi

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | tr "\n" ' ')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET} ]]; then
  export at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET} ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share/pictures ~/Pictures/share1
    # add printer?
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}

# function on_vpn {
#   return $(curl --fail --fail-early --max-time 1 --silent -o /dev/null \
#    https://argo-cd.ops.int.${CUSTOM_WORK_DOMAINS[2]})
# }
function work_main-sso {
  local domain1
  # use manual timer for ${CUSTOM_WORK_SSO_PROVIDER} expiration
  if ! session_is_active ${CUSTOM_WORK_SSO_PROVIDER}; then
    # first, make sure we are authenticated to password manager
    if ! _passman_needs_auth ; then
      _passman_auth
      pm
      echo "Unlock your password manager browser extension now..."
      sleep 5
    fi
    echo "Authenticating ${CUSTOM_WORK_SSO_PROVIDER}..."
    open -n -a "Brave Browser" --args "https://${CUSTOM_WORK_DOMAINS[1]/.com}.${CUSTOM_WORK_SSO_PROVIDER}.com" --profile-directory="Default"
    sleep 15
    session_is_active ${CUSTOM_WORK_SSO_PROVIDER} "43200 seconds" || true # 12h
    echo "Authenticating web apps requiring daily SSO..."
    for domain1 in ${CUSTOM_WORK_SSO_DAILY_DOMAINS}; do
      case "${domain1}" in
        atlassian*)
          # weekly auths
          [[ $(/bin/date +%u) -eq 1 ]] && open -n -a "Brave Browser" --args \
           "https://${CUSTOM_WORK_DOMAINS[1]/.com}.${CUSTOM_WORK_SSO_PROVIDER}.com/home/${domain1}?fromPlugin=true" --profile-directory="Default"
          ;;
        *)
          # weekday daily auths
          open -n -a "Brave Browser" --args "https://${CUSTOM_WORK_DOMAINS[1]/.com}.${CUSTOM_WORK_SSO_PROVIDER}.com/home/${domain1}?fromPlugin=true" --profile-directory="Default" ;;
      esac
    done
    docker-login
  fi
}
function work_cloud-sso {
  # TODO: remove all aws-sso stuff after granted/assume stops crashing
  # if aws-sso list Expires | grep Default | grep -q Expired ; then
  # if [[ $(aws --profile saml configure get x_security_token_expires) < $(gdate --iso-8601=seconds) ]]; then

  # use manual timer for aws-sso expiration as command itself can prompt for auth :(
  if ! session_is_active aws_sso; then
    echo "Authenticating aws-sso..."
    # second, aws-sso authentication should prompt automatically via browser
    # no known way to bypass browser for ${CUSTOM_WORK_SSO_PROVIDER} (with MFA) or aws-sso
    aws-sso exec --profile "${MY_PROFILE/_/:}" aws sts get-caller-identity > /dev/null
    session_is_active aws_sso "28800 seconds" || true # 8h
    echo "Authenticating aws sts..."
    kubectl cluster-info
    # aws-sso console \
    #  --account="${CUSTOM_WORK_DEFAULT_AWS_ACCT}" \
    #  --profile="${MY_PROFILE}" \
    #  --region="${AWS_DEFAULT_REGION}"
    # aws sso logout && aws-sso flush

    # regen configs
    # aws-sso config-profiles
  fi
}

# function work_granted-sso {
  # deprecated in favor of ~/.granted/config: "CredentialProcessAutoLogin = true"
  # local date_path expiration
  # date_path="$(brew --prefix coreutils)/libexec/gnubin/date"
  # expiration=$(granted sso-tokens expiry --json | jq -r '.[] | .expires_at' 2> /dev/null || \
  #  ${date_path} -Is --date "-1 days")
  # if [[ ${?} -ne 0 ]] || \
  #  [[ ${expiration} < $(${date_path} -Is) ]] || \
  #  [[ ${expiration} == "EXPIRED" ]]; then
  #   echo "Authenticating granted..."
  #   granted sso login --sso-start-url https://${CUSTOM_WORK_SSO_DOMAIN}/start --sso-region ${AWS_DEFAULT_REGION}
  # fi
  # disable until bugfix: assume "${MY_PROFILE}" --exec -- aws sts get-caller-identity

  # regen configs (put on a weekly timer or something and in backgrouns)
  # granted sso populate --prune && granted registry sync
# }

# only proceed on work system
${IS_ARM} || return 0
${is_weekend} && return 0
work_main-sso
work_cloud-sso
# work_granted-sso

[[ $(pwd) == "${HOME}" ]] && cd ~/build/github/ibex || return 0
