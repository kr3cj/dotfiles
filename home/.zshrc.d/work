[[ $- = *i* ]] || return 0
${IS_MACOS} || return 0
${HEALTHY_INTERNET} || return 0

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
export at_work="false"
at_home="false"
is_weekend=""
if [[ $(date +%a) =~ (Sat|Sun) && -z ${is_weekend} ]]; then
  is_weekend="true"
else
  is_weekend="false"
fi

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | tr "\n" ' ')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET} ]]; then
  export at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET} ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function _check_socks_proxy {
  local host1=${1}
  local port1=${2}
  local host1_ip="$(dig @1.1.1.1 +short ${host1} | grep '^[.0-9]*$' | tail -n1)"
  local response
  response="$(curl --connect-timeout 5 --silent --socks5 localhost:${port1} https://ifconfig.me | grep '^[.0-9]*$' | tail -n1)"
  if [[ "${response}" != "${host1_ip}" ]] ; then
    return 1
  else
    return 0
  fi
}
function _create_socks_proxy {
  local host1=${1}
  local port1=${2}
  # local ssh_proxy_options="-o ServerAliveInterval=30 -o ServerAliveCountMax=5 -f -N -D "
  local ssh_proxy_options="-f -N -D "
  [[ ${VERBOSE} -ge 1 ]] && ssh_proxy_options="-vvv ${ssh_proxy_options}"
  local ssh_proxy_response_file="/var/tmp/ssh_proxy_response.txt"
  # clear contents of response file
  :> ${ssh_proxy_response_file}
  local response

  if ! _check_socks_proxy ${host1} ${port1}; then
    echo "socks proxy not connected/working; first kill any old sessions"
    pgrep -f "ssh ${ssh_proxy_options} ${port1} ${host1}" && \
    pkill -f "ssh ${ssh_proxy_options} ${port1} ${host1}"

    echo -e "\nEstablishing ssh tunnel with ${host1}:${port1} \
     (/usr/bin/ssh ${ssh_proxy_options} ${port1} \"${host1}\")"
    if ! port ${host1}:22 &> /dev/null; then
      echo "ERROR: Skipping ${funcstack[1]}; unable to connect to \"${host1}:22\"."
      return 1
    else
      eval "/usr/bin/ssh ${ssh_proxy_options} ${port1} ${host1}"
    fi
  fi
}

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share/pictures ~/Pictures/share1
    # add printer?
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}
function work_saml2aws {
  if [[ $(grep expir ~/.aws/credentials | tail -n1 | awk '{print $3}') < $(gdate --iso-8601=seconds) ]]; then
    # make sure we are authenticated to password manager
    export OP_SESSION_my="$(head -n1 ~/.pm_session_token)"
    _passman_needs_auth || _passman_auth
    saml login --skip-prompt \
     --password=$(op item get "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}" --fields "password" --cache --session ${OP_SESSION_my}) \
     --mfa-token=$(otp "${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}")
    # remove --skip-prompt once when pw is changed
    [[ ${?} == 0 ]] || \
     echo "Has your password changed? Try removing keychain and run \"saml login\""
  fi
}

# if ${at_home}; then
#   if $(ping -c1 -W1 -i0.1 ${CUSTOM_HOME_NAS_HOST} &> /dev/null); then
#     mount_home_nfs
#     # openit "Backup and Sync"
#   fi
# elif ${at_work}; then
#   work_saml2aws
#   _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"

#   # open desktop apps (TODO: --background not working for Slack and Atom)
# openit Slack "Visual Studio Code"
#   unmount_home_nfs
# else
#   unmount_home_nfs
#   # # establish SSH tunnel to home proxy
#   # _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"
# fi

# only proceed on work system
${IS_ARM} || return 0
${is_weekend} || work_saml2aws
${at_work} && _create_socks_proxy "home.${CUSTOM_HOME_DOMAIN}" "2000"
# pm

[[ $(pwd) == "${HOME}" ]] && cd ~/build/github/ibex || return 0
