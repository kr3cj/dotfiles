[[ $- = *i* ]] || return 0
${IS_MACOS} || return 0
${HEALTHY_INTERNET} || return 0

# TODO: move most of this to a script called after login or screen-unlock
#  https://stackoverflow.com/questions/6442364/running-script-upon-login-mac

# get network awareness
ip_address=""
export at_work="false"
at_home="false"
is_weekend=""
if [[ $(date +%a) =~ (Sat|Sun) && -z ${is_weekend} ]]; then
  is_weekend="true"
else
  is_weekend="false"
fi

# grab all ip addresses
ip_address=$(/sbin/ifconfig 2> /dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | tr "\n" ' ')

# figure out location
if [[ ${ip_address} =~ ${CUSTOM_WORK_SUBNET} ]]; then
  export at_work="true"
elif [[ ${ip_address} =~ ${CUSTOM_HOME_SUBNET} ]]; then
  at_home="true"
else
  echo "Could not determine location from ip_address ${ip_address}"
fi

function unmount_home_nfs {
  while $(mount | grep -q "Documents/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share
  done
  while $(mount | grep -q "Pictures/share1") ; do
    umount -fv -t nfs ${CUSTOM_HOME_NAS_HOST}:/share/pictures
  done
}
function mount_home_nfs {
    mount | grep -q "Documents/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share ~/Documents/share1
    mount | grep -q "Pictures/share1" || mount -t nfs -o \
      vers=4,rw,soft,intr,bg,rwsize=32768,dsize=32768 \
      ${CUSTOM_HOME_NAS_HOST}:/mnt/media/share/pictures ~/Pictures/share1
    # add printer?
    # see https://www.jamf.com/jamf-nation/discussions/31099/adding-printer-to-mac-via-terminal-command-line-for-airprint
    # lpadmin -p canon_mg5220 -L "canon_mg5220" -E -v lpd://printer.${CUSTOM_HOME_NAS_HOST#*\.} -m everywhere
}

# function on_vpn {
#   return $(curl --fail --fail-early --max-time 1 --silent -o /dev/null \
#    https://argo-cd.ops.int.${CUSTOM_WORK_DOMAINS[2]})
# }
function work_aws-sso {
  if aws-sso list Expires | grep Default | grep -q Expired; then
  # if [[ $(aws --profile saml configure get x_security_token_expires) < $(gdate --iso-8601=seconds) ]]; then
    # make sure we are authenticated to password manager
    export OP_SESSION_my="$(head -n1 ~/.pm_session_token)"
    _passman_needs_auth || _passman_auth
    pm && echo "Unlock your password manager browser extension now..."
    sleep 5
    open -n -a "Brave Browser" --args https://github.com/${CUSTOM_WORK_DOMAINS[1]/.com} --profile-directory="Default"
    sleep 11
    # no known way to bypass browser for ${CUSTOM_WORK_SSO_PROVIDER} (with MFA) or aws-sso
    aws-sso exec --profile "${MY_AWS_PROFILE}" \
     aws sts get-caller-identity > /dev/null
    # aws-sso console \
    #  --account="${CUSTOM_WORK_DEFAULT_AWS_ACCT}" \
    #  --profile="${MY_AWS_PROFILE}" \
    #  --region="${AWS_DEFAULT_REGION}"
  fi
}

# only proceed on work system
${IS_ARM} || return 0
${is_weekend} && return 0
work_aws-sso
# if necessary, authenticate to docker repos (must be after aws auth)
if ! jq -e '.auths | has("'"${CUSTOM_WORK_DEFAULT_AWS_ACCT}"'.dkr.ecr.'"${AWS_DEFAULT_REGION}"'.amazonaws.com")' \
 ~/.docker/config.json > /dev/null || \
 [[ -n $(find ~/.docker/ -mindepth 1 -maxdepth 1 -name config.json -mmin +720) ]] ; then
  docker-login
fi
[[ $(pwd) == "${HOME}" ]] && cd ~/build/github/ibex || return 0
