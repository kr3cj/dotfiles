#  troubleshooting
# [[ ${HISTSIZE} -lt 1000000 ]] && echo -e "\nSomething has overridden \${HISTSIZE} to ${HISTSIZE}!!!\n"

[[ -f ~/.base_homeshick_vars ]] && source ~/.base_homeshick_vars

alias egrep='egrep --color=always'
alias fgrep='fgrep --color=always'
alias grep='grep --color=always'
alias ducks="du -cshx ./ | sort -h"
alias cdd="homeshick cd dotfiles"
alias cdp="homeshick cd dotfiles_private"
alias assume="source assume"
[[ "${MYSHELL}" =~ zsh ]] && alias p="source ~/.zshrc" || alias p="source ~/.bash_profile"
alias dmesg="dmesg --follow --ctime"

function acp {
  cp -av ${1} ${1}.$(/bin/date +%Y-%m-%d)
}

function bashcurl {
  # utilizes https://stackoverflow.com/questions/5951029/read-http-output-using-shell-bash-script
  local URL=${1}
  local tag="Connection: close"
  local mark=0

  if [[ -z "${URL}" ]]; then
    printf "Usage: %s \"URL\" [e.g.: %s http://www.google.com/]" \
      "${funcstack[1]}" "${funcstack[1]} \
      "
    return 1;
  elif ! [[ "${URL}" =~ "https://" ]]; then
    URL="https://${URL}"
    echo "Updated \${URL} to \"${URL}\""
  fi
  read proto server path <<<$(echo ${URL//// })
  DOC=/${path// //}
  HOST=${server//:*}
  PORT=${server//*:}
  [[ x"${HOST}" == x"${PORT}" ]] && PORT=80
  [[ ${VERBOSE} -ge 1 ]] && echo "HOST=${HOST}"
  [[ ${VERBOSE} -ge 1 ]] && echo "PORT=${PORT}"
  [[ ${VERBOSE} -ge 1 ]] && echo "DOC=${DOC}"

  # wrap with "bash -c" ?
  exec 5<>/dev/tcp/${HOST}/${PORT}
  echo -en "GET ${DOC} HTTP/1.1\r\nHost: ${HOST}\r\n${tag}\r\n\r\n" >&5
  while read line; do
    [[ $mark -eq 1 ]] && echo ${line}
    if [[ "${line}" =~ "${tag}" ]]; then
      mark=1
    fi
  done <&5
  exec 5>&-
}

function decode-jwt() {
  # Decode the JWT token (using base64 and jq)
  local auth_token=${1}
  if [[ -z "${auth_token}" ]]; then
    echo "Usage: ${funcstack[1]} <jwt-token>"
    return 1
  fi
  local decoded_token=$(echo "${auth_token}" | jq -R 'gsub("-";"+") | gsub("_";"/") | split(".") | .[1] | @base64d | fromjson')
  if [[ -z "${decoded_token}" ]] || [[ "${decoded_token}" =~ "error" ]]; then
    echo "Error decoding JWT token"
    return 1
  fi
}

function find-error() {
  grep -A2 -B2 -riHE 'DENIED|ERR|EXIST|FAIL|INVALID|SPECIFIED|SUCH|UNABLE|WARN|USAGE:|UNKNOWN|:\ LINE\ [0-9]' ${1} \
  | grep -v ierra \
  | grep -v erra
}

function joke() {
  curl https://icanhazdadjoke.com; echo
}

function port {
  # strip http.* from parameter
  local host1=${1#*//}
  # find port from either "server1:1234" or "server1 1234"
  local port1
  if [[ -n ${2} ]] && [[ ${host1} =~ ":" ]]; then
    (>&2 echo "  detected multiple port inputs; using ${2}")
    port1=${2}
    # strip port from host variable
    host1=${host1%:*}
  elif [[ -n ${2} ]]; then
    port1=${2}
  elif [[ -z ${2} ]] && [[ ${host1} =~ ":" ]]; then
    port1=${host1#*:}
    # strip port from host variable
    host1=${host1%:*}
  elif [[ -z ${2} ]] && [[ ! ${host} =~ ":" ]]; then
    (>&2 echo "You must supply a port number as an additional parameter or append \":1234\".")
    return 1
  fi

  if ! [[ "${port1}" =~ ^[0-9]+$ ]]; then
    (>&2 echo "You supplied an incorrect port.")
    return 1
  fi

  if pgrep -qi ${CUSTOM_WORK_VPN_PROVIDER}; then
    echo "WARNING: ${CUSTOM_WORK_VPN_PROVIDER} will always return success for VPN connections so don't trust them"
  fi

  [[ ${VERBOSE} -ge 1 ]] && \
    echo "Running: ${timeout_path} 2 bash -c \"echo >/dev/tcp/${host1}/${port1}\" > /dev/null 2>&1 && echo success \
    || (>&2 echo \"failure\"; return 1)"
  ${timeout_path} 2 bash -c "echo >/dev/tcp/${host1}/${port1}" > /dev/null 2>&1 && echo success \
    || (>&2 echo "failure"; return 1)
}

function sudo()
{
  if ${IS_ARM}; then
    if session_is_active sudo; then
      echo "Should already be authenticated to sudo..."
    else
      session_is_active sudo "890 seconds" || true
      echo ""
      read "?Push enter when sudo is auth'd by corporate software..."
    fi
    passman "$(hostname) macbook"
  fi
  $(whence -p sudo) ${@}
}

function _throttle()
{
  if [[ "${#}" -lt 2 ]]; then
    printf '%s\n' "Usage: throttle timeout command [arg ... ]" >&2
    return 1
  fi
  local t=${1}
  shift

  [[ ${VERBOSE} -ge 1 ]] && \
    echo "starting throttle function with t=${t} and _throttled=${_throttled}"

  if [[ -n "${_throttled["${1}"]}" ]]; then
    if [[ "$(date +%s)" -ge "${_throttled["${1}"]}" ]]; then
      "${@}" && _throttled["${1}"]=$((t + $(date +%s)))
    else
      : printf '%s\n' "Timeout for: ${1} has not yet been reached" >&2
    fi
  else
    "${@}" && _throttled["${1}"]=$((t + $(date +%s)))
  fi
}

if [[ "${IS_MACOS}" == "true" ]]; then
  # alias curl="$(brew --prefix curl)/bin/curl"
  # since the path file hasn't been sourced yet, use absolute paths to ls for macos
  alias ls="$(brew --prefix coreutils)/libexec/gnubin/ls -G --color=always"
  alias ll="$(brew --prefix coreutils)/libexec/gnubin/ls -hl -G --color=always"
  # alias srm="/bin/rm -vP"
  alias brewdeps="brew leaves | xargs brew deps --include-build --tree"
  alias slack="open -a Slack"
  alias spotify="open -a Spotify"
  # alias gphoto="open --background -a \"Google Photos Backup\""
  # alias gphoto="open --background -a \"Backup and Sync\""
  alias utc="echo -e \"date -u: $($(brew --prefix coreutils)/libexec/gnubin/date -u)\n\
  date --rfc-3339=seconds -u: $($(brew --prefix coreutils)/libexec/gnubin/date --rfc-3339=seconds -u)\""

  function ack {
    $(whence -p ack) "${@}" --ignore-dir=.terraform
  }

  function alfred {
    passman  "${CUSTOM_WORK_DOMAINS[1]/.com/} macbook" || echo "Unable to cache pw."
    $(whence -p alfred) "${@}"
  }

  function argod () {
    local uri="https://$(kubectl --context ${1} get -nargo ing | awk '{print $3}' | tail -n1)/workflows"
    [[ ${VERBOSE} -ge 1 ]] && \
      echo "Running \"( KUBECONFIG=~/.kube/${1} argo auth token | | head -n1 | pbcopy ) && \
       open ${uri}\"..."
    ( KUBECONFIG=~/.kube/${1} argo auth token | head -n1 | pbcopy ) && open ${uri}
  }

  function cb() {
    cd ~/build/github/${@}
  }

  function clear_clip {
    # clear clipboard after N seconds
    local wait_time="${1:-0}"
    (
      {
        sleep ${wait_time}
        pbcopy < /dev/null
      } & disown
    ) 2> /dev/null
    return 0
  }

  function keybase {
    passman  "Keybase" || echo "Unable to cache pw."
    $(whence -p keybase) "${@}"
  }

  function mysql-client {
    # usage mysql-client cluster1 short-rds-host1 user1 dbname1
    # spin up a throwaway container in k8s for querying RDS
    kubectl --context ${1} run tmp-shell --rm -i --tty \
     --image arey/mysql-client -- \
      mysql -P3306 -h"${2}.${AWS_DEFAULT_REGION}.rds.amazonaws.com" -u"${3}" ${4}
    # docker run --rm -it alpine:latest sh
    #   apk add bash mysql-client
    #   mysql -h"${2}.${AWS_DEFAULT_REGION}.rds.amazonaws.com" -P"3306" -u"${3}" ${4}
  }

  function psql-client {
    # usage: psql-client cluster1 short-rds-host1 user1 dbname1
    # spin up a throwaway container in k8s for querying RDS
    postgresql://${3}@${2}.${AWS_DEFAULT_REGION}.rds.amazonaws.com:5432/${4}
    kubectl --context ${1} run tmp-shell --rm -i --tty \
     --image jbergknoff/postgresql-client -- \
      postgresql://${3}@${2}.${AWS_DEFAULT_REGION}.rds.amazonaws.com/${4}"
    # docker run --rm -it jbergknoff/postgresql-client \
    #  postgresql://${3}@${2}.${AWS_DEFAULT_REGION}.rds.amazonaws.com/${4}"
  }

  function openit {
    # quickly opens macos programs in the background if not already running
    local -a programs=("${@}")
    local program1
    local -i item

    for ((item = 0; item < ${#programs[@]}; item++)); do
      program1="${programs[${item}]}"
      pgrep -qf "${program1}.app" || (nohup open --hide --background -a "${program1}" </dev/null >/dev/null 2>&1 &)
    done
  }

  function rsync {
    echo "Running: time $(whence -p rsync) -axHAXS --append-verify --info=progress2 --numeric-ids --size-only ${@}"
    time $(whence -p rsync) -axHAXS --append-verify --info=progress2 --numeric-ids --size-only "${@}"
    # time $(whence -p rsync) -axHAWXSP --numeric-ids --size-only "${@}"
  }

  # https://github.com/chubin/awesome-console-services
  # https://github.com/richb-hanover/OpenWrtScripts#betterspeedtestsh
  function speedtest {
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py \
    | python - --secure --simple --single
    # includes bufferbloat score: http://www.dslreports.com/speedtest
  }

  if [[ ${GHA_CI_RUN} != true ]] && [[ ${MYSHELL} =~ bash ]]; then
  # ci tool build errors on the matching syntax
    eval "function ssh {
      # host must be the first argument
      local host1=\"\${1#node/}\"
      shift
      local use_ssm=\"false\"
      case \"\${host1}\" in
        ${CUSTOM_WORK_SUBNET}*|$(echo ${CUSTOM_WORK_DOMAINS[@]/#/*.}|tr ' ' '|'))
          passman  \"${CUSTOM_WORK_DOMAINS[1]/.com/} ${CUSTOM_WORK_SSO_PROVIDER}\" ;;
        herky*)
          passman \"herky.${CUSTOM_HOME_NAS_HOST#*\.}\" ;;
        i-*|ip-10-*|10.*|ip-172-*|172.*|$(echo ${CUSTOM_WORK_DOMAINS[@]/#/*.}|tr ' ' '|'))
          use_ssm=\"true\" ;;
      esac
      # using homebrew ssh $(whence -p ssh) results in 'Bad configuration option: usekeychain' :shrug:
      if \${use_ssm}; then
        # .ssh/config will translate to aws ssm --start-session...
        echo \"Calling: aws --profile=\$(map-host-to-profile \${host1}) ssm start-session \
--region \${AWS_DEFAULT_REGION} --target \$(get-ec2-id-from-hostname \${host1})\"
        aws --profile=\$(map-host-to-profile \${host1}) ssm start-session \
         --region \${AWS_DEFAULT_REGION} \
         --target \$(get-ec2-id-from-hostname \${host1})
      else
        [[ \${VERBOSE} -ge 1 ]] && echo \"Running: /usr/bin/ssh \${host1} \${*}\"
        /usr/bin/ssh \${host1} \${*}
      fi
    }"
  fi

  function whatismyip {
    curl ifconfig.me
  }

  function weather {
    curl https://wttr.in/${CUSTOM_HOME_ZIPCODE}
  }
elif [[ "${IS_LINUX}" == "true" ]]; then
  alias ls="ls --color=always"
  alias ll="ls -hal --color=always"
  alias list-services="systemctl list-unit-files --type=service | grep enabled | \
    cut -d. -f1 | sort"
  # enforce one use of clipboard memory
  # export PASSMAN_CLIPBOARD_COMMAND="xclip -selection clipboard -in -l 1"

  function aria() {
    $(whence -p aria2c) \
    --continue=true \
    --always-resume=true \
    --seed-ratio=1.0 \
    --check-integrity=true \
    --dir=/share/ \
    ${1}
  }
  # -x2 \
fi
